# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

type Category {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  id: ID!
  mediaUrl: [String!]!
  name: String!
  products: [Product!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateCategoryInput {
  description: String!
  mediaUrl: [String!]!
  name: String!
}

input CreatePostInput {
  content: String!
  title: String!
}

input CreateProductInput {
  categoryId: String!
  description: String!
  discount: Float!
  mediaUrl: [String!]!
  name: String!
  price: Float!
  storeId: String!
}

"""Date custom scalar type"""
scalar Date

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createPost(data: CreatePostInput!): Post!
  createProduct(createProductInput: CreateProductInput!): Product!
  login(data: LoginInput!): Auth!
  refreshToken(token: String!): Token!
  removeCategory(id: String!): Category!
  removeProduct(id: Int!): Product!
  signup(data: SignupInput!): Auth!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  updateUser(data: UpdateUserInput!): User!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User!
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type PostConnection {
  edges: [PostEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: String!
  node: Post!
}

input PostOrder {
  direction: OrderDirection!
  field: PostOrderField!
}

"""Properties by which post connections can be ordered."""
enum PostOrderField {
  content
  createdAt
  id
  published
  title
  updatedAt
}

type Product {
  category: Category!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  discount: Int!
  id: ID!
  mediaUrl: [String!]!
  name: String!
  price: Int!
  store: Store!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type Query {
  category(id: String!): Category!
  hello(name: String!): String!
  me: User!
  post(postId: String!): Post!
  product(id: Int!): Product!
  publishedPosts(after: String, before: String, first: Int, last: Int, orderBy: PostOrder, query: String, skip: Int): PostConnection!
  userPosts(userId: String!): [Post!]!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Store {
  address: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!
  description: String!
  id: ID!
  name: String!
  products: [Product!]!
  staff: [User!]!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

input UpdateCategoryInput {
  description: String
  id: String!
  mediaUrl: [String!]
  name: String
}

input UpdateProductInput {
  categoryId: String
  description: String
  discount: Float
  id: Int!
  mediaUrl: [String!]
  name: String
  price: Float
  storeId: String
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: Date!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  posts: [Post!]!
  role: Role!
  store: Store

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
}
